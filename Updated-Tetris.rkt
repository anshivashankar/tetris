#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.2.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 79 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 6189 0 17 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 24 29 1 #"\n"
0 0 26 3 7 #"#reader"
0 0 24 3 1 #"("
0 0 14 3 3 #"lib"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"htdp-intermediate-lambda-reader.ss\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"lang\""
0 0 24 3 3 #")(("
0 0 14 3 7 #"modname"
0 0 24 3 1 #" "
0 0 14 3 14 #"Updated-Tetris"
0 0 24 3 3 #") ("
0 0 14 3 19 #"read-case-sensitive"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #") ("
0 0 14 3 10 #"teachpacks"
0 0 24 3 3 #" (("
0 0 14 3 3 #"lib"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"image.rkt\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"teachpack\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"2htdp\""
0 0 24 3 5 #"))) ("
0 0 14 3 13 #"htdp-settings"
0 0 24 3 3 #" #("
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 11 #"constructor"
0 0 24 3 1 #" "
0 0 14 3 17 #"repeating-decimal"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 4 #"none"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #" (("
0 0 14 3 3 #"lib"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"image.rkt\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"teachpack\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"2htdp\""
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; Data Definitions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; A Block is a (make-block Number Number Color)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; A Tetra is a (make-tetra Posn BSet)"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; The center point is the point around which the tetra rotates"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; when it spins."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 2 #" ("
0 0 14 3 6 #"center"
0 0 24 3 1 #" "
0 0 14 3 6 #"blocks"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; A Set of Blocks (BSet) is one of:"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; - empty"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; - (cons Block BSet)"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; Order does not matter."
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; A World is a (make-world Tetra BSet Score)"
0 0 24 29 1 #"\n"
0 0 17 3 130
(
 #";; The BSet represents the pile of blocks at the bottom of the scree"
 #"n, and the Score represents how many blocks have been deleted."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tetra"
0 0 24 3 1 #" "
0 0 14 3 4 #"pile"
0 0 24 3 1 #" "
0 0 14 3 5 #"score"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Constants"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"WLENGTH"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"WHEIGHT"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"BG"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 7 #"WLENGTH"
0 0 24 3 1 #" "
0 0 14 3 7 #"WHEIGHT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"NUM-ROWS"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"2.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"6.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"7.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"8.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"9.5"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 21 3 4 #"10.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"11.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"12.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"13.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"14.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"15.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"16.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"17.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"18.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"19.5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"O"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"I"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"2.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"purple"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"purple"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"purple"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"purple"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"J"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cyan"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cyan"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cyan"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cyan"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"T"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"orange"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"orange"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"orange"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"orange"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"Z"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"S"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"test-pile"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 2 #".5"
0 0 24 3 1 #" "
0 0 21 3 4 #"19.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"yellow"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"19.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"yellow"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"2.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"19.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"yellow"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"19.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"yellow"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"19.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"yellow"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"19.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"yellow"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"6.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"19.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"yellow"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"7.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"19.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"yellow"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"8.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"19.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"yellow"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"9.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"19.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"yellow"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"Wish list of functions"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"tetra-down: Tetra -> Tetra"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"update: World -> World"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"key-handler: World -> World"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"draw-world: World -> Image"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"grow-pile: BSet Tetra -> BSet"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"draw-blocks: BSet -> Image"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"draw-tetra: Tetra -> Image"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"on-floor?: Tetra -> Boolean"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"on-pile?: Tetra -> Boolean"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"on-pile-right?: Tetra -> Boolean"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"on-pile-left?: Tetra -> Boolean"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; draw-blocks: BSet Image -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Draws a BSet on the background"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"draw-blocks"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 2 #") "
0 0 14 3 2 #"bg"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 3 #") ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 11 #"block-color"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 3 #")) "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-y"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 3 #")) "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 11 #"draw-blocks"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 2 #") "
0 0 14 3 2 #"bg"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"draw-blocks"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 2 #"BG"
0 0 24 3 2 #") "
0 0 14 3 2 #"BG"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"draw-blocks"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"I"
0 0 24 3 2 #") "
0 0 14 3 2 #"BG"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"2.5"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #".5"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #".5"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #".5"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 67
#"                                                                  ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 67
#"                                                                  ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #".5"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 2 #") "
0 0 14 3 2 #"BG"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; draw-tetra: Tetra Image -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Displays the Tetra"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"draw-blocks"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #") "
0 0 14 3 2 #"bg"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"I"
0 0 24 3 1 #" "
0 0 14 3 2 #"BG"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"2.5"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #".5"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #".5"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #".5"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 67
#"                                                                  ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 67
#"                                                                  ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #".5"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 2 #") "
0 0 14 3 2 #"BG"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; draw-world: World -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; Draws all aspects of the world, the Tetras and the Pile"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"done?"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 10 #"draw-final"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"overlay"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-tetra"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 11 #"draw-blocks"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-pile"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 2 #"BG"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 2 #"BG"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; block-down: Block -> Block"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; Moves a Block one space down on the grid"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"block-down"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-block"
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"block-color"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"block-down"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; blocks-down: BSet -> BSet"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; Moves each Block down one space on the grid"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"blocks-down"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 10 #"block-down"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"blocks-down"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; tetra-down: Tetra -> Tetra"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; Moves the Tetra down one space on the grid"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"tetra-down"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"blocks-down"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"tetra-down"
0 0 24 3 1 #" "
0 0 14 3 1 #"Z"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"2.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"2.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; on-floor-tetra?: Tetra -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; Checks if a Tetra is on the bottom of the screen"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"on-floor-tetra?"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 21 3 2 #"19"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"on-floor-tetra?"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"on-floor-tetra?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; on-pile-block?: Block BSet -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; Checks if a Block is on the pile"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"on-pile-block?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 17 3 18 #"; Block -> Boolean"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 7 #"block-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))) "
0 0 14 3 4 #"bset"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"on-pile-block?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"on-pile-block?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"on-pile-block?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; on-pile-blocks?: BSet BSet -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; Checks if the Blocks from the first BSet are on the second BSet"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"on-pile-blocks?"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 17 3 18 #"; Block -> Boolean"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 14 #"on-pile-block?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #")) "
0 0 14 3 1 #"t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"on-pile-blocks?"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"on-pile-blocks?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"on-pile-blocks?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; on-pile-tetra?: Tetra BSet -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; Checks if a Tetra is on the pile"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"on-pile-tetra?"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"on-pile-blocks?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #") "
0 0 14 3 4 #"bset"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"on-pile-tetra?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"on-pile-tetra?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; grow-pile: Tetra BSet -> BSet"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; Adds the Blocks of a Tetra to the BSet representing the pile and r"
 #"emoves lines."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"grow-pile"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"update-pile"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #") "
0 0 14 3 4 #"bset"
0 0 24 3 2 #") "
0 0 14 3 8 #"NUM-ROWS"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; erase-row: BSet Number -> BSet"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Removes Blocks from a full row"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"erase-row"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 17 3 17 #";Block -> Boolean"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"bset"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"erase-row"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 3 #")) "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"erase-row"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; pile-down: BSet Number -> BSet"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; Moves the Blocks above the y value given by the Number down"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pile-down"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 17 3 15 #";Block -> Block"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 10 #"block-down"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 4 #"bset"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pile-down"
0 0 24 3 2 #" ("
0 0 14 3 9 #"erase-row"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"7/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"7/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"35/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"7/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"33/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"7/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"31/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"19/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"19/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"19/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"35/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"19/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"33/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"1/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"35/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"3/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"35/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"3/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"5/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"11/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"13/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"13/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"35/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"15/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"35/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"17/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"15/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"17/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"15/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"7/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"orange"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"9/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"orange"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"9/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"orange"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"11/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"orange"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"1/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cyan"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"1/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cyan"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"3/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cyan"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"5/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cyan"
0 0 24 3 3 #")) "
0 0 21 3 4 #"18.5"
0 0 24 3 2 #") "
0 0 21 3 4 #"18.5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"7/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"18.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"7/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"17.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"7/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"16.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"19/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"19/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"18.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"19/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"17.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"1/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"18.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"3/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"18.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 38 #")                                     "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"13/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"18.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"15/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"18.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"17/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"15/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"7/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"orange"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"9/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"orange"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"11/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"orange"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"1/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cyan"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"3/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cyan"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"5/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cyan"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; row-full?: BSet Number -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; Checks if a row on the grid is covered in blocks"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"row-full?"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 17 3 18 #"; Block -> Boolean"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 3 #")) "
0 0 14 3 4 #"bset"
0 0 24 3 3 #")) "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"row-full?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 3 #")) "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"row-full?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 3 #")) "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"row-full?"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; update-pile: BSet LoN -> Bset"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; Checks to see if any rows are full, then erases them from the pile"
 #"."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"update-pile"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 2 #") "
0 0 14 3 4 #"bset"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 9 #"row-full?"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 11 #"update-pile"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pile-down"
0 0 24 3 2 #" ("
0 0 14 3 9 #"erase-row"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"update-pile"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"update-pile"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"7/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"7/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"35/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"7/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"33/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"7/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"31/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"19/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"19/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"19/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"35/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"19/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"33/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"1/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"35/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"3/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"35/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"3/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"5/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"11/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"13/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"13/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"35/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"15/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"35/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"17/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"15/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"17/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"15/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"7/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"orange"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"9/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"orange"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"9/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"orange"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"11/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"orange"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"1/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"37/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cyan"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"1/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cyan"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"3/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cyan"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"5/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cyan"
0 0 24 3 3 #")) "
0 0 14 3 8 #"NUM-ROWS"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"7/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"18.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"7/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"17.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"7/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"16.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"19/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"19/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"18.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"19/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"17.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"1/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"18.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"3/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"18.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pink"
0 0 24 3 38 #")                                     "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"13/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"18.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"15/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"18.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"17/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"15/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"7/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"orange"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"9/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"orange"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 5 #"11/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"orange"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"1/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cyan"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"3/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cyan"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 6          10 71 4 #"5/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 6          10 71 5 #"39/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cyan"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"update-pile"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 3 #")) "
0 0 14 3 8 #"NUM-ROWS"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"update-pile"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 8 #"NUM-ROWS"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; update: World -> World"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Updates the world"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"update"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"done?"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 9 #"stop-with"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 15 #"on-floor-tetra?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 14 #"on-pile-tetra?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 10 #"world-pile"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 12 #"random-tetra"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 9 #"grow-pile"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 10 #"world-pile"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 10 #"tetra-down"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 10 #"world-pile"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; tetra-left: Tetra -> Tetra"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; Moves a Tetra to the left"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"tetra-left"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 17 3 16 #"; Block -> Block"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 7 #"block-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 11 #"block-color"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 5 #"))) ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"tetra-left"
0 0 24 3 1 #" "
0 0 14 3 1 #"S"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"2.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; tetra-right: Tetra -> Tetra"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; Moves a Tetra to the left"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"tetra-right"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 17 3 16 #"; Block -> Block"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 7 #"block-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 11 #"block-color"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 5 #"))) ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"tetra-right"
0 0 24 3 1 #" "
0 0 14 3 1 #"S"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"6.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; block-rotate-ccw: Posn Block -> Block"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; Rotate the block 90 counterclockwise around the posn."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"block-rotate-ccw"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-block"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 7 #"block-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"block-color"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"block-rotate-ccw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; blocks-rotate-ccw: Posn BSet -> BSet"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; Rotate all of the BSet Blocks about the posn counterclockwise"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"blocks-rotate-ccw"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 17 3 16 #"; Block -> Block"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 16 #"block-rotate-ccw"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 14 3 4 #"bset"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"blocks-rotate-ccw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"blocks-rotate-ccw"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 1 #"I"
0 0 24 3 3 #") ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"I"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"-0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"2.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; tetra-rotate-ccw: Tetra -> Tetra"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; Rotates a Tetra 90 degrees about its center counterclockwise"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"tetra-rotate-ccw"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 17 #"blocks-rotate-ccw"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"tetra-rotate-ccw"
0 0 24 3 1 #" "
0 0 14 3 1 #"I"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"-0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"2.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; block-rotate-cw : Posn Block -> Block"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; Rotate the block 90 clockwise around the posn."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"block-rotate-cw"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"block-rotate-ccw"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 16 #"block-rotate-ccw"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 16 #"block-rotate-ccw"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"block-rotate-cw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; blocks-rotate-cw: Posn BSet -> BSet"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; Rotate all of the BSet Blocks about the posn clockwise"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"blocks-rotate-cw"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 17 3 16 #"; Block -> Block"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 15 #"block-rotate-cw"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 14 3 4 #"bset"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"blocks-rotate-cw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"blocks-rotate-cw"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 1 #"I"
0 0 24 3 3 #") ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"I"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"2.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"-0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; tetra-rotate-cw: Tetra -> Tetra"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; Rotates a Tetra 90 degrees about its center clockwise"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"tetra-rotate-cw"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 16 #"blocks-rotate-cw"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"tetra-rotate-cw"
0 0 24 3 1 #" "
0 0 14 3 1 #"I"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"2.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"3.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"-0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; off-screen-block?: Block -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; Determines if a Block is offscreen"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"off-screen-block?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 21 3 3 #"-.5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 21 3 4 #"10.5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 21 3 2 #"20"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"off-screen-block?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 3 #")) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"off-screen-block?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 4 #"-0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"blue"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"off-screen-block?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"WLENGTH"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"purple"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; off-screen-tetra?: Tetra -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; Determines if a Tetra has any offscreen blocks"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"on-screen-tetra?"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 17 3 16 #"; Block -> Block"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 17 #"off-screen-block?"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"on-screen-tetra?"
0 0 24 3 1 #" "
0 0 14 3 1 #"O"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"on-screen-tetra?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 4 #"-0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; on-screen-where? : Tetra [Tetra -> Tetra] -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; Determines if tetra moves, in the direction specified by [Tetra ->"
 #" Tetra]."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"on-screen-where?"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"on-screen-tetra?"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"on-screen-where?"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 1 #" "
0 0 14 3 16 #"tetra-rotate-ccw"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"on-screen-where?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                  ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 14 3 16 #"tetra-rotate-ccw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; in-pile-block?: Block BSet -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; Checks if a Block is in the pile"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"in-pile-block?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 7 #"block-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 7 #"block-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 5 #")))) "
0 0 14 3 4 #"bset"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"in-pile-block?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"in-pile-block?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"in-pile-block?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; in-pile-blocks?: BSet BSet -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; Checks if the Blocks from the first BSet are in the second BSet"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"in-pile-blocks?"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 14 #"in-pile-block?"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #")) "
0 0 14 3 1 #"t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"in-pile-blocks?"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"in-pile-blocks?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"in-pile-blocks?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; in-pile-tetra?: Tetra BSet -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; Checks if a Tetra is in the pile"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"in-pile-tetra?"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"in-pile-blocks?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #") "
0 0 14 3 4 #"bset"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"in-pile-tetra?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"in-pile-tetra?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; in-pile-tetra-right? Tetra BSet -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #"; Checks to see if, when the tetra moves right, the tetra is not in "
 #"the pile."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 24 #"not-in-pile-tetra-right?"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 14 #"in-pile-tetra?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"tetra-right"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #") "
0 0 14 3 4 #"bset"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 24 #"not-in-pile-tetra-right?"
0 0 24 3 1 #" "
0 0 14 3 1 #"O"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; in-pile-tetra-left? Tetra BSet -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; Checks to see if, when the tetra moves left, the tetra is not in t"
 #"he pile."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 23 #"not-in-pile-tetra-left?"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 14 #"in-pile-tetra?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"tetra-left"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #") "
0 0 14 3 4 #"bset"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 23 #"not-in-pile-tetra-left?"
0 0 24 3 1 #" "
0 0 14 3 1 #"O"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; in-pile-tetra-ccw? Tetra BSet -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; Checks to see if, when the tetra moves ccw, the tetra is not in th"
 #"e pile."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"not-in-pile-tetra-ccw?"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 14 #"in-pile-tetra?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"tetra-rotate-ccw"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #") "
0 0 14 3 4 #"bset"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 22 #"not-in-pile-tetra-ccw?"
0 0 24 3 1 #" "
0 0 14 3 1 #"O"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; in-pile-tetra-cw? Tetra BSet -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; Checks to see if, when the tetra moves cw, the tetra is in the pil"
 #"e."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"not-in-pile-tetra-cw?"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 14 #"in-pile-tetra?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"tetra-rotate-cw"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #") "
0 0 14 3 4 #"bset"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 21 #"not-in-pile-tetra-cw?"
0 0 24 3 1 #" "
0 0 14 3 1 #"O"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; key-handler: World Key -> World"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; Updates the World according to the keys pressed"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"key-handler"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 16 #"on-screen-where?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 10 #"tetra-left"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 23 #"not-in-pile-tetra-left?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 10 #"world-pile"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 10 #"tetra-left"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 10 #"world-pile"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 16 #"on-screen-where?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 11 #"tetra-right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 24 #"not-in-pile-tetra-right?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 10 #"world-pile"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 11 #"tetra-right"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 10 #"world-pile"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 16 #"on-screen-where?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 16 #"tetra-rotate-ccw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 22 #"not-in-pile-tetra-ccw?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 10 #"world-pile"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 16 #"tetra-rotate-ccw"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 10 #"world-pile"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"s\""
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 16 #"on-screen-where?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 15 #"tetra-rotate-cw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 21 #"not-in-pile-tetra-cw?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 10 #"world-pile"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 15 #"tetra-rotate-cw"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 10 #"world-pile"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"update"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 10 #"world-pile"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; at-top-block?: Block -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; Checks if a Block is at the top of the screen"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"at-top-block?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 7 #"block-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"at-top-block?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"at-top-block?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 3 #")) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; at-top-blocks?: BSet -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; Checks if a BSet contains Blocks at the top of the screen"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"at-top-blocks?"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 17 3 16 #"; Block -> Block"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 13 #"at-top-block?"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 14 3 4 #"bset"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"at-top-blocks?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"at-top-blocks?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; done?: World -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; Checks if the pile is at the top of the screen"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"done?"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"at-top-blocks?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-pile"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; block-count: BSet -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; Counts the Number of Blocks in a BSet"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"block-count"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"bset"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"block-count"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; draw-final: World -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; Draws the final scene"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-final"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"overlay"
0 0 24 3 2 #" ("
0 0 14 3 4 #"text"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"Final Score: \""
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 11 #"block-count"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-pile"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 2 #") "
0 0 14 3 2 #"BG"
0 0 24 3 4 #"))  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; random-tetra: Number -> Tetra"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; Consumes a Number and produces a pre-defined Tetra based on that N"
 #"umber"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"random-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 1 #"O"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 1 #"I"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 1 #"L"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 1 #"J"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 14 3 1 #"T"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 14 3 1 #"Z"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #") "
0 0 14 3 1 #"S"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"WORLD0"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 12 #"random-tetra"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"big-bang"
0 0 24 3 1 #" "
0 0 14 3 6 #"WORLD0"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"to-draw"
0 0 24 3 1 #" "
0 0 14 3 10 #"draw-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 6 #"update"
0 0 24 3 1 #" "
0 0 21 3 2 #".5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"on-key"
0 0 24 3 1 #" "
0 0 14 3 11 #"key-handler"
0 0 24 3 2 #"))"
0           0
